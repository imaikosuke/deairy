// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type CreateDiaryInput struct {
	// タイトル
	Title string `json:"title"`
	// 本文
	Content string `json:"content"`
	// 公開設定
	Visibility DiaryVisibility `json:"visibility"`
	// タグ
	Tags []string `json:"tags,omitempty"`
}

type CreateUserInput struct {
	// ユーザ名
	Name string `json:"name"`
	// メールアドレス
	Email string `json:"email"`
}

// 日記を表す型
type Diary struct {
	// 日記ID
	ID string `json:"id"`
	// タイトル
	Title string `json:"title"`
	// 本文
	Content string `json:"content"`
	// 公開設定
	Visibility DiaryVisibility `json:"visibility"`
	// タグ一覧
	Tags []string `json:"tags"`
	// 作成者
	Author *User `json:"author"`
	// 作成日時
	CreatedAt string `json:"createdAt"`
	// 更新日時
	UpdatedAt string `json:"updatedAt"`
}

type Mutation struct {
}

type Query struct {
}

type UpdateDiaryInput struct {
	// タイトル
	Title string `json:"title"`
	// 本文
	Content string `json:"content"`
	// 公開設定
	Visibility DiaryVisibility `json:"visibility"`
	// タグ
	Tags []string `json:"tags,omitempty"`
}

type UpdateUserInput struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}

// ユーザを表す型
type User struct {
	// ユーザID
	ID string `json:"id"`
	// ユーザ名
	Name string `json:"name"`
	// メールアドレス
	Email string `json:"email"`
	// ユーザの日記一覧
	Diaries []*Diary `json:"diaries"`
	// 作成日時
	CreatedAt string `json:"createdAt"`
	// 更新日時
	UpdatedAt string `json:"updatedAt"`
}

// 日記の公開設定
type DiaryVisibility string

const (
	// 公開
	DiaryVisibilityPublic DiaryVisibility = "PUBLIC"
	// 非公開
	DiaryVisibilityPrivate DiaryVisibility = "PRIVATE"
)

var AllDiaryVisibility = []DiaryVisibility{
	DiaryVisibilityPublic,
	DiaryVisibilityPrivate,
}

func (e DiaryVisibility) IsValid() bool {
	switch e {
	case DiaryVisibilityPublic, DiaryVisibilityPrivate:
		return true
	}
	return false
}

func (e DiaryVisibility) String() string {
	return string(e)
}

func (e *DiaryVisibility) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiaryVisibility(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiaryVisibility", str)
	}
	return nil
}

func (e DiaryVisibility) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
